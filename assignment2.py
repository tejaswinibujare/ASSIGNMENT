# -*- coding: utf-8 -*-
"""Assignment2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c_W4lkmGBpTjs-XSTgdu6jQRrj3DVfaN
"""

#string formating:-
#String formatting is the process of infusing things in the string dynamically and presenting the string. 
#The format() method allows you to format the seleted part of the string.
#1]% operator
#It is the oldest method of string formatting. Here we use the modulo % operator. The modulo % is also known as the “string-formatting operator”.

print('Joe stood up and %s to the crowd.' %'spoke')
 
print('There are %d dogs.' %4)
print('My name is %s'%'teju')

x = 'looked'
 
print("Misha %s and %s around"%('walked',x))

#2]format():-
# Formatters work by putting in one or more replacement fields and placeholders defined by a pair of curly braces { } into a string and calling the str.format().
# The value we wish to put into the placeholders and concatenate with the string passed as parameters into the format function. 
print("my name is {}" .format("teju"))

print("a:{a},b={b},c={c}" .format(a=2,b="Four",c=56.9))

print('{0} {2} {1} {3}' .format('my' ,'is','name','Teju'))

#3]f string:-
#The idea behind f-strings is to make string interpolation simpler.
#To create an f-string, prefix the string with the letter “ f ”. The string itself can be formatted in much the same way that you would with str.format(). 
#F-strings provide a concise and convenient way to embed python expressions inside string literals for formatting.
s='Teju'
print(f"my name is {s}")

a=10
b=20
print(f"Addition of two numbers are {a+b}")
print(f"He said his age is {2*(a+b)}")

#string Template class:-
#Template Class allows us to create simplified syntax for output specification. 
# The format uses placeholder names formed by $ with valid Python identifiers /alphanumeric characters and underscores
from string import Template
n1='Hello'
n2='GeeksforGeeks'
n=Template('$n3! This is $n4')
print(n.substitute(n3=n1,n4=n2))

